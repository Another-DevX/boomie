{
  "address": "0xe1F5172C6Fca31047411B75C3150F47ad1A80594",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_gho",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxOnRampAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_onRampCooldownPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sustainabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sustainabilityFeeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "venmoIdHash",
          "type": "bytes32"
        }
      ],
      "name": "AccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellerAccount",
          "type": "address"
        }
      ],
      "name": "DepositClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellerAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "name": "DepositReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellerAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "IntentExpirationPeriodSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyerAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "IntentFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "IntentPruned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyerAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "IntentSignaled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxOnRampAmount",
          "type": "uint256"
        }
      ],
      "name": "MaxOnRampAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "MinDepositAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "onRampCooldownPeriod",
          "type": "uint256"
        }
      ],
      "name": "OnRampCooldownPeriodSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "SustainabilityFeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SustainabilityFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "UserAddedToDenylist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listOwner",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "approvedUser",
          "type": "bytes32"
        }
      ],
      "name": "UserRemovedFromDenylist",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "addAccountToDenylist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allDeposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outstandingIntentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "cancelIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outstandingIntentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountDeposits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "depositorIdHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "depositor",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "depositAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingDeposits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "outstandingIntentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "conversionRate",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "intentHashes",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct BoomieRamp.Deposit",
              "name": "deposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoomieRamp.DepositWithAvailableLiquidity[]",
          "name": "accountDeposits",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "venmoIdHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256[]",
              "name": "deposits",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct BoomieRamp.AccountInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountVenmoIdHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getDeniedUsers",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outstandingIntentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "conversionRate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "intentHashes",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct BoomieRamp.Deposit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_depositIds",
          "type": "uint256[]"
        }
      ],
      "name": "getDepositFromIds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "depositorIdHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "depositor",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "depositAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingDeposits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "outstandingIntentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "conversionRate",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "intentHashes",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct BoomieRamp.Deposit",
              "name": "deposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoomieRamp.DepositWithAvailableLiquidity[]",
          "name": "depositArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositsWithMinimumBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outstandingIntentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "conversionRate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "intentHashes",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct BoomieRamp.Deposit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_intentHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "getIntentsWithOnRamperId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "intentHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "buyerAccount",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deposit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intentTimestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BoomieRamp.Intent",
              "name": "intent",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "onRamperIdHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BoomieRamp.IntentWithOnRamperId[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getLastOnRampTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getVenmoIdCurrentIntentHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gho",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intentExpirationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "intents",
      "outputs": [
        {
          "internalType": "address",
          "name": "buyerAccount",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intentTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_deniedUser",
          "type": "bytes32"
        }
      ],
      "name": "isDeniedUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxOnRampAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_receiveAmount",
          "type": "uint256"
        }
      ],
      "name": "offRamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "onRamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onRampCooldownPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "releaseFundsToOnramper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_approvedUser",
          "type": "bytes32"
        }
      ],
      "name": "removeAccountFromDenylist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "setIntentExpirationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxOnRampAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxOnRampAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_onRampCooldownPeriod",
          "type": "uint256"
        }
      ],
      "name": "setOnRampCooldownPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setSustainabilityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setSustainabilityFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "signalIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sustainabilityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sustainabilityFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_depositIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xef7816ffc65d9e70ef74fd43577710aa493067eb9c7133001efa206878e0b0cf",
  "receipt": {
    "to": null,
    "from": "0x04A3961bB66cB3DE67d55EEAbB66D0A38558C5F2",
    "contractAddress": "0xe1F5172C6Fca31047411B75C3150F47ad1A80594",
    "transactionIndex": 61,
    "gasUsed": "3334128",
    "logsBloom": "0x
    "blockHash": "0xe06ea1d8cc546d5f23a60db561940c0b8ecf2e746a59755134c41bf1e9747f17",
    "transactionHash": "0xef7816ffc65d9e70ef74fd43577710aa493067eb9c7133001efa206878e0b0cf",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 5125219,
        "transactionHash": "0xef7816ffc65d9e70ef74fd43577710aa493067eb9c7133001efa206878e0b0cf",
        "address": "0xe1F5172C6Fca31047411B75C3150F47ad1A80594",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000004a3961bb66cb3de67d55eeabb66d0a38558c5f2"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0xe06ea1d8cc546d5f23a60db561940c0b8ecf2e746a59755134c41bf1e9747f17"
      },
      {
        "transactionIndex": 61,
        "blockNumber": 5125219,
        "transactionHash": "0xef7816ffc65d9e70ef74fd43577710aa493067eb9c7133001efa206878e0b0cf",
        "address": "0xe1F5172C6Fca31047411B75C3150F47ad1A80594",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000004a3961bb66cb3de67d55eeabb66d0a38558c5f2",
          "0x00000000000000000000000004a3961bb66cb3de67d55eeabb66d0a38558c5f2"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0xe06ea1d8cc546d5f23a60db561940c0b8ecf2e746a59755134c41bf1e9747f17"
      }
    ],
    "blockNumber": 5125219,
    "cumulativeGasUsed": "8382035",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x04A3961bB66cB3DE67d55EEAbB66D0A38558C5F2",
    "0xc4bF5CbDaBE595361438F8c6a187bDc330539c60",
    "25000000000000000000",
    "250000000000000000000",
    86400,
    30,
    "5000000000000000000",
    "0x04A3961bB66cB3DE67d55EEAbB66D0A38558C5F2"
  ],
  "numDeployments": 2,
  "solcInputHash": "33896278f7fbeb50c49d6ece2e836f8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_gho\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxOnRampAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_onRampCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sustainabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sustainabilityFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"venmoIdHash\",\"type\":\"bytes32\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellerAccount\",\"type\":\"address\"}],\"name\":\"DepositClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellerAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellerAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intentExpirationPeriod\",\"type\":\"uint256\"}],\"name\":\"IntentExpirationPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyerAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"IntentFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"IntentPruned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyerAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IntentSignaled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxOnRampAmount\",\"type\":\"uint256\"}],\"name\":\"MaxOnRampAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"MinDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onRampCooldownPeriod\",\"type\":\"uint256\"}],\"name\":\"OnRampCooldownPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SustainabilityFeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SustainabilityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deniedUser\",\"type\":\"bytes32\"}],\"name\":\"UserAddedToDenylist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listOwner\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"approvedUser\",\"type\":\"bytes32\"}],\"name\":\"UserRemovedFromDenylist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_deniedUser\",\"type\":\"bytes32\"}],\"name\":\"addAccountToDenylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDeposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"cancelIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositorIdHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BoomieRamp.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct BoomieRamp.DepositWithAvailableLiquidity[]\",\"name\":\"accountDeposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"venmoIdHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"internalType\":\"struct BoomieRamp.AccountInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountVenmoIdHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDeniedUsers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BoomieRamp.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositIds\",\"type\":\"uint256[]\"}],\"name\":\"getDepositFromIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositorIdHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BoomieRamp.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct BoomieRamp.DepositWithAvailableLiquidity[]\",\"name\":\"depositArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositsWithMinimumBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BoomieRamp.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_intentHashes\",\"type\":\"bytes32[]\"}],\"name\":\"getIntentsWithOnRamperId\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyerAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intentTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BoomieRamp.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"onRamperIdHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct BoomieRamp.IntentWithOnRamperId[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getLastOnRampTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getVenmoIdCurrentIntentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gho\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intentExpirationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"intents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyerAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intentTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_deniedUser\",\"type\":\"bytes32\"}],\"name\":\"isDeniedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOnRampAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_receiveAmount\",\"type\":\"uint256\"}],\"name\":\"offRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"onRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onRampCooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"releaseFundsToOnramper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_approvedUser\",\"type\":\"bytes32\"}],\"name\":\"removeAccountFromDenylist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"}],\"name\":\"setIntentExpirationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxOnRampAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxOnRampAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_onRampCooldownPeriod\",\"type\":\"uint256\"}],\"name\":\"setOnRampCooldownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSustainabilityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setSustainabilityFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"signalIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainabilityFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BuidlGuidl\",\"kind\":\"dev\",\"methods\":{\"addAccountToDenylist(bytes32)\":{\"params\":{\"_deniedUser\":\"Poseidon hash of the venmoId being banned\"}},\"cancelIntent(bytes32)\":{\"params\":{\"_intentHash\":\"Hash of intent being cancelled\"}},\"offRamp(uint256,uint256)\":{\"params\":{\"_depositAmount\":\"The amount of GHO to off-ramp\",\"_receiveAmount\":\"The amount of XOC to receive\"}},\"onRamp(bytes32)\":{\"params\":{\"_intentHash\":\"intentHash\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"releaseFundsToOnramper(bytes32)\":{\"params\":{\"_intentHash\":\"Hash of intent to resolve by releasing the funds\"}},\"removeAccountFromDenylist(bytes32)\":{\"params\":{\"_approvedUser\":\"Poseidon hash of the venmoId being approved\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setIntentExpirationPeriod(uint256)\":{\"params\":{\"_intentExpirationPeriod\":\"New intent expiration period\"}},\"setMaxOnRampAmount(uint256)\":{\"params\":{\"_maxOnRampAmount\":\"The new max on ramp amount\"}},\"setMinDepositAmount(uint256)\":{\"params\":{\"_minDepositAmount\":\"The new minimum deposit amount\"}},\"setOnRampCooldownPeriod(uint256)\":{\"params\":{\"_onRampCooldownPeriod\":\"New on-ramp cooldown period\"}},\"setSustainabilityFee(uint256)\":{\"params\":{\"_fee\":\"The new sustainability fee in precise units (10**18, ie 10% = 1e17)\"}},\"setSustainabilityFeeRecipient(address)\":{\"params\":{\"_feeRecipient\":\"The new fee recipient address\"}},\"signalIntent(uint256,uint256,address)\":{\"params\":{\"_amount\":\"The amount of GHO the user wants to on-ramp\",\"_depositId\":\"The ID of the deposit the on-ramper intends to use for\",\"_to\":\"Address to forward funds to (can be same as buyerAccount)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawDeposit(uint256[])\":{\"params\":{\"_depositIds\":\"Array of depositIds the depositor is attempting to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAccountToDenylist(bytes32)\":{\"notice\":\"Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to signal an intent on the user's deposit they will be denied.\"},\"cancelIntent(bytes32)\":{\"notice\":\"Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new intent. Deposit state is updated to reflect the cancelled intent.\"},\"getDepositsWithMinimumBalance()\":{\"notice\":\"View function to get all Deposits with a remainingDeposits balance larger than 25\"},\"initialize()\":{\"notice\":\"Initialize Ramp with the addresses of the Processors\"},\"offRamp(uint256,uint256)\":{\"notice\":\"Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount of GHO.\"},\"onRamp(bytes32)\":{\"notice\":\"Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated, intent is removed, and deposit state is updated. GHO is transferred to the on-ramper.\"},\"register()\":{\"notice\":\"Registers a new account\"},\"releaseFundsToOnramper(bytes32)\":{\"notice\":\"Allows off-ramper to release funds to the on-ramper in case of a failed on-ramp or because of some other arrangement between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and deposit state is updated. GHO is transferred to the on-ramper.\"},\"removeAccountFromDenylist(bytes32)\":{\"notice\":\"Removes a venmoId from a depositor's deny list.\"},\"setIntentExpirationPeriod(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent locking up a depositor's funds.\"},\"setMaxOnRampAmount(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than this amount a user must make multiple transactions.\"},\"setMinDepositAmount(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\"},\"setOnRampCooldownPeriod(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this amount of time before they can signalIntent to on-ramp again.\"},\"setSustainabilityFee(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp.\"},\"setSustainabilityFeeRecipient(address)\":{\"notice\":\"GOVERNANCE ONLY: Updates the recepient of sustainability fees.\"},\"signalIntent(uint256,uint256,address)\":{\"notice\":\"Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of address (tracked using globalAccount). Caller must not be on the depositor's deny list. If there are prunable intents then they will be deleted from the deposit to be able to maintain state hygiene.\"},\"withdrawDeposit(uint256[])\":{\"notice\":\"Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be returned. Deposit will be deleted as long as there are no more outstanding intents.\"}},\"notice\":\"A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BoomieRamp.sol\":\"BoomieRamp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BoomieRamp.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Bytes32ArrayUtils } from \\\"./external/Bytes32ArrayUtils.sol\\\";\\nimport { Uint256ArrayUtils } from \\\"./external/Uint256ArrayUtils.sol\\\";\\n\\n/**\\n * A smart contract that allows changing a state variable of the contract and tracking the changes\\n * It also allows the owner to withdraw the Ether in the contract\\n * @author BuidlGuidl\\n */\\ncontract BoomieRamp is Ownable {\\n\\tusing Bytes32ArrayUtils for bytes32[];\\n\\tusing Uint256ArrayUtils for uint256[];\\n\\n\\tevent AccountRegistered(\\n\\t\\taddress indexed accountOwner,\\n\\t\\tbytes32 indexed venmoIdHash\\n\\t);\\n\\tevent DepositReceived(\\n\\t\\tuint256 indexed depositId,\\n\\t\\taddress indexed sellerAccount,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 conversionRate\\n\\t);\\n\\tevent IntentSignaled(\\n\\t\\tbytes32 indexed intentHash,\\n\\t\\tuint256 indexed depositId,\\n\\t\\taddress indexed buyerAccount,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 timestamp\\n\\t);\\n\\n\\tevent IntentPruned(bytes32 indexed intentHash, uint256 indexed depositId);\\n\\t// Do we want to emit the buyerAccount\\n\\tevent IntentFulfilled(\\n\\t\\tbytes32 indexed intentHash,\\n\\t\\tuint256 indexed depositId,\\n\\t\\taddress indexed buyerAccount,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 feeAmount\\n\\t);\\n\\t// Do we want to emit the depositor or the venmoId\\n\\tevent DepositWithdrawn(\\n\\t\\tuint256 indexed depositId,\\n\\t\\taddress indexed sellerAccount,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\tevent DepositClosed(uint256 depositId, address sellerAccount);\\n\\tevent UserAddedToDenylist(bytes32 listOwner, bytes32 deniedUser);\\n\\tevent UserRemovedFromDenylist(bytes32 listOwner, bytes32 approvedUser);\\n\\tevent MinDepositAmountSet(uint256 minDepositAmount);\\n\\tevent MaxOnRampAmountSet(uint256 maxOnRampAmount);\\n\\tevent IntentExpirationPeriodSet(uint256 intentExpirationPeriod);\\n\\tevent OnRampCooldownPeriodSet(uint256 onRampCooldownPeriod);\\n\\tevent SustainabilityFeeUpdated(uint256 fee);\\n\\tevent SustainabilityFeeRecipientUpdated(address feeRecipient);\\n\\n\\t/* ============ Structs ============ */\\n\\n\\t// Each Account is tied to a GlobalAccount via its associated venmoIdHash. Each account is represented by an Ethereum address\\n\\t// and is allowed to have at most 5 deposits associated with it.\\n\\tstruct AccountInfo {\\n\\t\\tbytes32 venmoIdHash; // current is hash of msg.sender, prev - Poseidon hash of account's venmoId\\n\\t\\tuint256[] deposits; // Array of open account deposits\\n\\t}\\n\\n\\tstruct Deposit {\\n\\t\\taddress depositor;\\n\\t\\tuint256 depositAmount; // Amount of GHO deposited\\n\\t\\tuint256 remainingDeposits; // Amount of remaining deposited liquidity\\n\\t\\tuint256 outstandingIntentAmount; // Amount of outstanding intents (may include expired intents)\\n\\t\\tuint256 conversionRate; // Conversion required by off-ramper between GHO/XOC\\n\\t\\tbytes32[] intentHashes; // Array of hashes of all open intents (may include some expired if not pruned)\\n\\t}\\n\\n\\tstruct DepositWithAvailableLiquidity {\\n\\t\\tuint256 depositId; // ID of the deposit\\n\\t\\tbytes32 depositorIdHash; // Depositor's venmoIdHash\\n\\t\\tDeposit deposit; // Deposit struct\\n\\t\\tuint256 availableLiquidity; // Amount of liquidity available to signal intents (net of expired intents)\\n\\t}\\n\\n\\tstruct Intent {\\n\\t\\taddress buyerAccount; // On-ramper's address\\n\\t\\taddress to; // Address to forward funds to (can be same as buyerAccount)\\n\\t\\tuint256 deposit; // ID of the deposit the intent is signaling on\\n\\t\\tuint256 amount; // Amount of GHO the on-ramper signals intent for on-chain\\n\\t\\tuint256 intentTimestamp; // Timestamp of when the intent was signaled\\n\\t}\\n\\n\\tstruct IntentWithOnRamperId {\\n\\t\\tbytes32 intentHash; // Intent hash\\n\\t\\tIntent intent; // Intent struct\\n\\t\\tbytes32 onRamperIdHash; // Poseidon hash of the on-ramper's venmoId\\n\\t}\\n\\n\\tstruct DenyList {\\n\\t\\tbytes32[] deniedUsers; // Array of venmoIdHashes that are denied from taking depositors liquidity\\n\\t\\tmapping(bytes32 => bool) isDenied; // Mapping of venmoIdHash to boolean indicating if the user is denied\\n\\t}\\n\\n\\t// A Global Account is defined as an account represented by one venmoIdHash. This is used to enforce limitations on actions across\\n\\t// all Ethereum addresses that are associated with that venmoId. In this case we use it to enforce a cooldown period between on ramps,\\n\\t// restrict each venmo account to one outstanding intent at a time, and to enforce deny lists.\\n\\tstruct GlobalAccountInfo {\\n\\t\\tbytes32 currentIntentHash; // Hash of the current open intent (if exists)\\n\\t\\tuint256 lastOnrampTimestamp; // Timestamp of the last on-ramp transaction used to check if cooldown period elapsed\\n\\t\\tDenyList denyList; // Deny list of the account\\n\\t}\\n\\n\\t/* ============ Modifiers ============ */\\n\\t// TODO - change function to check for whitelisted users\\n\\tmodifier onlyRegisteredUser() {\\n\\t\\trequire(\\n\\t\\t\\tgetAccountVenmoIdHash(msg.sender) != bytes32(0),\\n\\t\\t\\t\\\"Caller must be registered user\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/* ============ Constants ============ */\\n\\tuint256 internal constant PRECISE_UNIT = 1e18;\\n\\tuint256 internal constant MAX_DEPOSITS = 5; // An account can only have max 5 different deposit parameterizations to prevent locking funds\\n\\tuint256 constant MAX_SUSTAINABILITY_FEE = 5e16; // 5% max sustainability fee\\n\\n\\t/* ============ State Variables ============ */\\n\\tIERC20 public immutable gho; // GHO token contract\\n\\n\\tbool public isInitialized; // Indicates if contract has been initialized\\n\\n\\t// TODO - update GlobalAccountInfo to just an address?\\n\\t// Follow-up - we can still use the address as the bytes32 variable and link the GlobalAccountInfo to it\\n\\tmapping(bytes32 => GlobalAccountInfo) internal globalAccount; // Mapping of venmoIdHash to information used to enforce actions across Ethereum accounts\\n\\tmapping(address => AccountInfo) internal accounts; // Mapping of Ethereum accounts to their account information (venmoIdHash and deposits)\\n\\tmapping(uint256 => Deposit) public deposits; // Mapping of depositIds to deposit structs\\n\\tmapping(bytes32 => Intent) public intents; // Mapping of intentHashes to intent structs\\n\\n\\tuint256 public minDepositAmount; // Minimum amount of GHO that can be deposited\\n\\tuint256 public maxOnRampAmount; // Maximum amount of GHO that can be on-ramped in a single transaction\\n\\tuint256 public onRampCooldownPeriod; // Time period that must elapse between completing an on-ramp and signaling a new intent\\n\\tuint256 public intentExpirationPeriod; // Time period after which an intent can be pruned from the system\\n\\tuint256 public sustainabilityFee; // Fee charged to on-rampers in preciseUnits (1e16 = 1%)\\n\\taddress public sustainabilityFeeRecipient; // Address that receives the sustainability fee\\n\\n\\tDeposit[] public allDeposits;\\n\\tuint256 public depositCounter; // Counter for depositIds\\n\\n\\t/* ============ Constructor ============ */\\n\\tconstructor(\\n\\t\\taddress _owner,\\n\\t\\tIERC20 _gho,\\n\\t\\tuint256 _minDepositAmount,\\n\\t\\tuint256 _maxOnRampAmount,\\n\\t\\tuint256 _intentExpirationPeriod,\\n\\t\\tuint256 _onRampCooldownPeriod,\\n\\t\\tuint256 _sustainabilityFee,\\n\\t\\taddress _sustainabilityFeeRecipient\\n\\t) Ownable() {\\n\\t\\tgho = _gho;\\n\\t\\tminDepositAmount = _minDepositAmount;\\n\\t\\tmaxOnRampAmount = _maxOnRampAmount;\\n\\t\\tintentExpirationPeriod = _intentExpirationPeriod;\\n\\t\\tonRampCooldownPeriod = _onRampCooldownPeriod;\\n\\t\\tsustainabilityFee = _sustainabilityFee;\\n\\t\\tsustainabilityFeeRecipient = _sustainabilityFeeRecipient;\\n\\n\\t\\ttransferOwnership(_owner);\\n\\t}\\n\\n\\t/* ============ External Functions ============ */\\n\\n\\t/**\\n\\t * @notice Initialize Ramp with the addresses of the Processors\\n\\t */\\n\\tfunction initialize() external onlyOwner {\\n\\t\\trequire(!isInitialized, \\\"Already initialized\\\");\\n\\n\\t\\tisInitialized = true;\\n\\t}\\n\\n\\t// TODO - switch registration to register additional ethereum accounts under one account\\n\\t/**\\n\\t * @notice Registers a new account\\n\\t */\\n\\tfunction register() external {\\n\\t\\trequire(\\n\\t\\t\\tgetAccountVenmoIdHash(msg.sender) == bytes32(0),\\n\\t\\t\\t\\\"Account already associated with venmoId\\\"\\n\\t\\t);\\n\\t\\taddress senderAddress = msg.sender;\\n\\t\\tbytes32 venmoIdHash = bytes32(uint256(uint160(senderAddress)));\\n\\n\\t\\taccounts[msg.sender].venmoIdHash = venmoIdHash;\\n\\n\\t\\temit AccountRegistered(msg.sender, venmoIdHash);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to\\n\\t * previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\\n\\t * of GHO.\\n\\t *\\n\\t * @param _depositAmount    The amount of GHO to off-ramp\\n\\t * @param _receiveAmount    The amount of XOC to receive\\n\\t */\\n\\tfunction offRamp(uint256 _depositAmount, uint256 _receiveAmount) external {\\n\\t\\trequire(\\n\\t\\t\\taccounts[msg.sender].deposits.length < MAX_DEPOSITS,\\n\\t\\t\\t\\\"Maximum deposit amount reached\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_depositAmount >= minDepositAmount,\\n\\t\\t\\t\\\"Deposit amount must be greater than min deposit amount\\\"\\n\\t\\t);\\n\\t\\trequire(_receiveAmount > 0, \\\"Receive amount must be greater than 0\\\");\\n\\n\\t\\tuint256 conversionRate = (_depositAmount * PRECISE_UNIT) /\\n\\t\\t\\t_receiveAmount;\\n\\t\\tuint256 depositId = depositCounter++;\\n\\n\\t\\taccounts[msg.sender].deposits.push(depositId);\\n\\n\\t\\tdeposits[depositId] = Deposit({\\n\\t\\t\\tdepositor: msg.sender,\\n\\t\\t\\tdepositAmount: _depositAmount,\\n\\t\\t\\tremainingDeposits: _depositAmount,\\n\\t\\t\\toutstandingIntentAmount: 0,\\n\\t\\t\\tconversionRate: conversionRate,\\n\\t\\t\\tintentHashes: new bytes32[](0)\\n\\t\\t});\\n\\n\\t\\tallDeposits.push(deposits[depositId]);\\n\\n\\t\\tgho.transferFrom(msg.sender, address(this), _depositAmount);\\n\\n\\t\\temit DepositReceived(\\n\\t\\t\\tdepositId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_depositAmount,\\n\\t\\t\\tconversionRate\\n\\t\\t);\\n\\t}\\n\\n\\t// TODO - replace getAccountVenmoIdHash for getGlobalAccount, which should return the user address\\n\\t// TODO - replace venmoIdHash with the buyerAccount (just use msg.sender)\\n\\t// TODO - replace depositorVenmoHasId with the sellerAccount\\n\\t// TODO - replace _calculateIntentHash param (venmoIdHash) with buyerAccount\\n\\t/**\\n\\t * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\\n\\t * in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of\\n\\t * address (tracked using globalAccount). Caller must not be on the depositor's deny list. If there are prunable intents then\\n\\t * they will be deleted from the deposit to be able to maintain state hygiene.\\n\\t *\\n\\t * @param _depositId    The ID of the deposit the on-ramper intends to use for\\n\\t * @param _amount       The amount of GHO the user wants to on-ramp\\n\\t * @param _to           Address to forward funds to (can be same as buyerAccount)\\n\\t */\\n\\tfunction signalIntent(\\n\\t\\tuint256 _depositId,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _to\\n\\t) external {\\n\\t\\tbytes32 venmoIdHash = getAccountVenmoIdHash(msg.sender);\\n\\t\\tDeposit storage deposit = deposits[_depositId];\\n\\t\\tbytes32 depositorVenmoIdHash = getAccountVenmoIdHash(deposit.depositor);\\n\\n\\t\\t// Caller validity checks\\n\\t\\trequire(\\n\\t\\t\\t!globalAccount[depositorVenmoIdHash].denyList.isDenied[venmoIdHash],\\n\\t\\t\\t\\\"Onramper on depositor's denylist\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tglobalAccount[venmoIdHash].lastOnrampTimestamp +\\n\\t\\t\\t\\tonRampCooldownPeriod <=\\n\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\\"On ramp cool down period not elapsed\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tglobalAccount[venmoIdHash].currentIntentHash == bytes32(0),\\n\\t\\t\\t\\\"Intent still outstanding\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tdepositorVenmoIdHash != venmoIdHash,\\n\\t\\t\\t\\\"Sender cannot be the depositor\\\"\\n\\t\\t);\\n\\n\\t\\t// Intent information checks\\n\\t\\trequire(deposit.depositor != address(0), \\\"Deposit does not exist\\\");\\n\\t\\trequire(_amount > 0, \\\"Signaled amount must be greater than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\t_amount <= maxOnRampAmount,\\n\\t\\t\\t\\\"Signaled amount must be less than max on-ramp amount\\\"\\n\\t\\t);\\n\\t\\trequire(_to != address(0), \\\"Cannot send to zero address\\\");\\n\\n\\t\\tbytes32 intentHash = _calculateIntentHash(_depositId);\\n\\n\\t\\tif (deposit.remainingDeposits < _amount) {\\n\\t\\t\\t(\\n\\t\\t\\t\\tbytes32[] memory prunableIntents,\\n\\t\\t\\t\\tuint256 reclaimableAmount\\n\\t\\t\\t) = _getPrunableIntents(_depositId);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tdeposit.remainingDeposits + reclaimableAmount >= _amount,\\n\\t\\t\\t\\t\\\"Not enough liquidity\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t_pruneIntents(deposit, prunableIntents);\\n\\t\\t\\tdeposit.remainingDeposits += reclaimableAmount;\\n\\t\\t\\tdeposit.outstandingIntentAmount -= reclaimableAmount;\\n\\t\\t}\\n\\n\\t\\tintents[intentHash] = Intent({\\n\\t\\t\\tbuyerAccount: msg.sender,\\n\\t\\t\\tto: _to,\\n\\t\\t\\tdeposit: _depositId,\\n\\t\\t\\tamount: _amount,\\n\\t\\t\\tintentTimestamp: block.timestamp\\n\\t\\t});\\n\\n\\t\\tglobalAccount[venmoIdHash].currentIntentHash = intentHash;\\n\\n\\t\\tdeposit.remainingDeposits -= _amount;\\n\\t\\tdeposit.outstandingIntentAmount += _amount;\\n\\t\\tdeposit.intentHashes.push(intentHash);\\n\\n\\t\\taddress venmoIdHashAsAddress = address(uint160(uint256(venmoIdHash)));\\n\\n\\t\\temit IntentSignaled(\\n\\t\\t\\tintentHash,\\n\\t\\t\\t_depositId,\\n\\t\\t\\tvenmoIdHashAsAddress,\\n\\t\\t\\t_to,\\n\\t\\t\\t_amount,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\t// TODO - replace getAccountVenmoIdHash with plain address comparison?\\n\\t/**\\n\\t * @notice Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new\\n\\t * intent. Deposit state is updated to reflect the cancelled intent.\\n\\t *\\n\\t * @param _intentHash    Hash of intent being cancelled\\n\\t */\\n\\tfunction cancelIntent(bytes32 _intentHash) external {\\n\\t\\tIntent memory intent = intents[_intentHash];\\n\\n\\t\\trequire(intent.intentTimestamp != 0, \\\"Intent does not exist\\\");\\n\\t\\trequire(\\n\\t\\t\\tgetAccountVenmoIdHash(intent.buyerAccount) ==\\n\\t\\t\\t\\tgetAccountVenmoIdHash(msg.sender),\\n\\t\\t\\t\\\"Sender must be the on-ramper\\\"\\n\\t\\t);\\n\\n\\t\\tDeposit storage deposit = deposits[intent.deposit];\\n\\n\\t\\t_pruneIntent(deposit, _intentHash);\\n\\n\\t\\tdeposit.remainingDeposits += intent.amount;\\n\\t\\tdeposit.outstandingIntentAmount -= intent.amount;\\n\\t}\\n\\n\\t// TODO - replace verification with plain token transfer?\\n\\t/**\\n\\t * @notice Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated,\\n\\t * intent is removed, and deposit state is updated. GHO is transferred to the on-ramper.\\n\\t *\\n\\t * @param _intentHash       intentHash\\n\\t */\\n\\tfunction onRamp(bytes32 _intentHash) external {\\n\\t\\tIntent memory intent = intents[_intentHash];\\n\\t\\tDeposit storage deposit = deposits[intent.deposit];\\n\\n\\t\\t_pruneIntent(deposit, _intentHash);\\n\\n\\t\\tdeposit.outstandingIntentAmount -= intent.amount;\\n\\t\\tglobalAccount[getAccountVenmoIdHash(intent.buyerAccount)]\\n\\t\\t\\t.lastOnrampTimestamp = block.timestamp;\\n\\t\\t_closeDepositIfNecessary(intent.deposit, deposit);\\n\\n\\t\\t_transferFunds(_intentHash, intent);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows off-ramper to release funds to the on-ramper in case of a failed on-ramp or because of some other arrangement\\n\\t * between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and\\n\\t * deposit state is updated. GHO is transferred to the on-ramper.\\n\\t *\\n\\t * @param _intentHash        Hash of intent to resolve by releasing the funds\\n\\t */\\n\\tfunction releaseFundsToOnramper(bytes32 _intentHash) external {\\n\\t\\tIntent memory intent = intents[_intentHash];\\n\\t\\tDeposit storage deposit = deposits[intent.deposit];\\n\\n\\t\\trequire(intent.buyerAccount != address(0), \\\"Intent does not exist\\\");\\n\\t\\trequire(\\n\\t\\t\\tdeposit.depositor == msg.sender,\\n\\t\\t\\t\\\"Caller must be the depositor\\\"\\n\\t\\t);\\n\\n\\t\\t_pruneIntent(deposit, _intentHash);\\n\\n\\t\\tdeposit.outstandingIntentAmount -= intent.amount;\\n\\t\\tglobalAccount[getAccountVenmoIdHash(intent.buyerAccount)]\\n\\t\\t\\t.lastOnrampTimestamp = block.timestamp;\\n\\t\\t_closeDepositIfNecessary(intent.deposit, deposit);\\n\\n\\t\\t_transferFunds(_intentHash, intent);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all\\n\\t * remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be\\n\\t * returned. Deposit will be deleted as long as there are no more outstanding intents.\\n\\t *\\n\\t * @param _depositIds   Array of depositIds the depositor is attempting to withdraw\\n\\t */\\n\\tfunction withdrawDeposit(uint256[] memory _depositIds) external {\\n\\t\\tuint256 returnAmount;\\n\\n\\t\\tfor (uint256 i = 0; i < _depositIds.length; ++i) {\\n\\t\\t\\tuint256 depositId = _depositIds[i];\\n\\t\\t\\tDeposit storage deposit = deposits[depositId];\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tdeposit.depositor == msg.sender,\\n\\t\\t\\t\\t\\\"Sender must be the depositor\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t(\\n\\t\\t\\t\\tbytes32[] memory prunableIntents,\\n\\t\\t\\t\\tuint256 reclaimableAmount\\n\\t\\t\\t) = _getPrunableIntents(depositId);\\n\\n\\t\\t\\t_pruneIntents(deposit, prunableIntents);\\n\\n\\t\\t\\treturnAmount += deposit.remainingDeposits + reclaimableAmount;\\n\\n\\t\\t\\tdeposit.outstandingIntentAmount -= reclaimableAmount;\\n\\n\\t\\t\\temit DepositWithdrawn(\\n\\t\\t\\t\\tdepositId,\\n\\t\\t\\t\\tdeposit.depositor,\\n\\t\\t\\t\\tdeposit.remainingDeposits + reclaimableAmount\\n\\t\\t\\t);\\n\\n\\t\\t\\tdelete deposit.remainingDeposits;\\n\\t\\t\\t_closeDepositIfNecessary(depositId, deposit);\\n\\t\\t}\\n\\n\\t\\tgho.transfer(msg.sender, returnAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to\\n\\t * signal an intent on the user's deposit they will be denied.\\n\\t *\\n\\t * @param _deniedUser   Poseidon hash of the venmoId being banned\\n\\t */\\n\\tfunction addAccountToDenylist(bytes32 _deniedUser) external {\\n\\t\\tbytes32 denyingUser = getAccountVenmoIdHash(msg.sender);\\n\\n\\t\\trequire(\\n\\t\\t\\t!globalAccount[denyingUser].denyList.isDenied[_deniedUser],\\n\\t\\t\\t\\\"User already on denylist\\\"\\n\\t\\t);\\n\\n\\t\\tglobalAccount[denyingUser].denyList.isDenied[_deniedUser] = true;\\n\\t\\tglobalAccount[denyingUser].denyList.deniedUsers.push(_deniedUser);\\n\\n\\t\\temit UserAddedToDenylist(denyingUser, _deniedUser);\\n\\t}\\n\\n\\t// TODO - replace getAccountVenmoIdHash\\n\\t/**\\n\\t * @notice Removes a venmoId from a depositor's deny list.\\n\\t *\\n\\t * @param _approvedUser   Poseidon hash of the venmoId being approved\\n\\t */\\n\\tfunction removeAccountFromDenylist(bytes32 _approvedUser) external {\\n\\t\\tbytes32 approvingUser = getAccountVenmoIdHash(msg.sender);\\n\\n\\t\\trequire(\\n\\t\\t\\tglobalAccount[approvingUser].denyList.isDenied[_approvedUser],\\n\\t\\t\\t\\\"User not on denylist\\\"\\n\\t\\t);\\n\\n\\t\\tglobalAccount[approvingUser].denyList.isDenied[_approvedUser] = false;\\n\\t\\tglobalAccount[approvingUser].denyList.deniedUsers.removeStorage(\\n\\t\\t\\t_approvedUser\\n\\t\\t);\\n\\n\\t\\temit UserRemovedFromDenylist(approvingUser, _approvedUser);\\n\\t}\\n\\n\\t/* ============ Governance Functions ============ */\\n\\n\\t/**\\n\\t * @notice GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping.\\n\\t *\\n\\t * @param _minDepositAmount   The new minimum deposit amount\\n\\t */\\n\\tfunction setMinDepositAmount(uint256 _minDepositAmount) external onlyOwner {\\n\\t\\trequire(_minDepositAmount != 0, \\\"Minimum deposit cannot be zero\\\");\\n\\n\\t\\tminDepositAmount = _minDepositAmount;\\n\\t\\temit MinDepositAmountSet(_minDepositAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp.\\n\\t *\\n\\t * @param _fee   The new sustainability fee in precise units (10**18, ie 10% = 1e17)\\n\\t */\\n\\tfunction setSustainabilityFee(uint256 _fee) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\t_fee <= MAX_SUSTAINABILITY_FEE,\\n\\t\\t\\t\\\"Fee cannot be greater than max fee\\\"\\n\\t\\t);\\n\\n\\t\\tsustainabilityFee = _fee;\\n\\t\\temit SustainabilityFeeUpdated(_fee);\\n\\t}\\n\\n\\t/**\\n\\t * @notice GOVERNANCE ONLY: Updates the recepient of sustainability fees.\\n\\t *\\n\\t * @param _feeRecipient   The new fee recipient address\\n\\t */\\n\\tfunction setSustainabilityFeeRecipient(\\n\\t\\taddress _feeRecipient\\n\\t) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\t_feeRecipient != address(0),\\n\\t\\t\\t\\\"Fee recipient cannot be zero address\\\"\\n\\t\\t);\\n\\n\\t\\tsustainabilityFeeRecipient = _feeRecipient;\\n\\t\\temit SustainabilityFeeRecipientUpdated(_feeRecipient);\\n\\t}\\n\\n\\t/**\\n\\t * @notice GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than\\n\\t * this amount a user must make multiple transactions.\\n\\t *\\n\\t * @param _maxOnRampAmount   The new max on ramp amount\\n\\t */\\n\\tfunction setMaxOnRampAmount(uint256 _maxOnRampAmount) external onlyOwner {\\n\\t\\trequire(_maxOnRampAmount != 0, \\\"Max on ramp amount cannot be zero\\\");\\n\\n\\t\\tmaxOnRampAmount = _maxOnRampAmount;\\n\\t\\temit MaxOnRampAmountSet(_maxOnRampAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this\\n\\t * amount of time before they can signalIntent to on-ramp again.\\n\\t *\\n\\t * @param _onRampCooldownPeriod   New on-ramp cooldown period\\n\\t */\\n\\tfunction setOnRampCooldownPeriod(\\n\\t\\tuint256 _onRampCooldownPeriod\\n\\t) external onlyOwner {\\n\\t\\tonRampCooldownPeriod = _onRampCooldownPeriod;\\n\\t\\temit OnRampCooldownPeriodSet(_onRampCooldownPeriod);\\n\\t}\\n\\n\\t/**\\n\\t * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\\n\\t * locking up a depositor's funds.\\n\\t *\\n\\t * @param _intentExpirationPeriod   New intent expiration period\\n\\t */\\n\\tfunction setIntentExpirationPeriod(\\n\\t\\tuint256 _intentExpirationPeriod\\n\\t) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\t_intentExpirationPeriod != 0,\\n\\t\\t\\t\\\"Max intent expiration period cannot be zero\\\"\\n\\t\\t);\\n\\n\\t\\tintentExpirationPeriod = _intentExpirationPeriod;\\n\\t\\temit IntentExpirationPeriodSet(_intentExpirationPeriod);\\n\\t}\\n\\n\\t/* ============ External View Functions ============ */\\n\\n\\t/**\\n\\t * @notice View function to get all Deposits with a remainingDeposits balance larger than 25\\n\\t */\\n\\tfunction getDepositsWithMinimumBalance()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Deposit[] memory)\\n\\t{\\n\\t\\tuint256 count = 0;\\n\\n\\t\\t// First, determine the number of deposits that meet the criteria\\n\\t\\tfor (uint256 i = 0; i < allDeposits.length; i++) {\\n\\t\\t\\tif (allDeposits[i].remainingDeposits > 25 * PRECISE_UNIT) {\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Initialize an array to hold qualifying Deposits\\n\\t\\tDeposit[] memory qualifyingDeposits = new Deposit[](count);\\n\\t\\tuint256 index = 0;\\n\\n\\t\\t// Populate the array with Deposits that meet the criteria\\n\\t\\tfor (uint256 i = 0; i < allDeposits.length; i++) {\\n\\t\\t\\tif (allDeposits[i].remainingDeposits > 25) {\\n\\t\\t\\t\\tqualifyingDeposits[index] = allDeposits[i];\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn qualifyingDeposits;\\n\\t}\\n\\n\\tfunction getDeposit(\\n\\t\\tuint256 _depositId\\n\\t) external view returns (Deposit memory) {\\n\\t\\treturn deposits[_depositId];\\n\\t}\\n\\n\\tfunction getAccountInfo(\\n\\t\\taddress _account\\n\\t) external view returns (AccountInfo memory) {\\n\\t\\treturn\\n\\t\\t\\tAccountInfo({\\n\\t\\t\\t\\tvenmoIdHash: getAccountVenmoIdHash(_account),\\n\\t\\t\\t\\tdeposits: accounts[_account].deposits\\n\\t\\t\\t});\\n\\t}\\n\\n\\tfunction getAccountVenmoIdHash(\\n\\t\\taddress _account\\n\\t) public view returns (bytes32) {\\n\\t\\treturn accounts[_account].venmoIdHash;\\n\\t}\\n\\n\\tfunction getVenmoIdCurrentIntentHash(\\n\\t\\taddress _account\\n\\t) external view returns (bytes32) {\\n\\t\\treturn globalAccount[getAccountVenmoIdHash(_account)].currentIntentHash;\\n\\t}\\n\\n\\tfunction getLastOnRampTimestamp(\\n\\t\\taddress _account\\n\\t) external view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tglobalAccount[getAccountVenmoIdHash(_account)].lastOnrampTimestamp;\\n\\t}\\n\\n\\tfunction getDeniedUsers(\\n\\t\\taddress _account\\n\\t) external view returns (bytes32[] memory) {\\n\\t\\treturn\\n\\t\\t\\tglobalAccount[getAccountVenmoIdHash(_account)].denyList.deniedUsers;\\n\\t}\\n\\n\\tfunction isDeniedUser(\\n\\t\\taddress _account,\\n\\t\\tbytes32 _deniedUser\\n\\t) external view returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tglobalAccount[getAccountVenmoIdHash(_account)].denyList.isDenied[\\n\\t\\t\\t\\t_deniedUser\\n\\t\\t\\t];\\n\\t}\\n\\n\\tfunction getIntentsWithOnRamperId(\\n\\t\\tbytes32[] calldata _intentHashes\\n\\t) external view returns (IntentWithOnRamperId[] memory) {\\n\\t\\tIntentWithOnRamperId[]\\n\\t\\t\\tmemory intentsWithOnRamperId = new IntentWithOnRamperId[](\\n\\t\\t\\t\\t_intentHashes.length\\n\\t\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < _intentHashes.length; ++i) {\\n\\t\\t\\tbytes32 intentHash = _intentHashes[i];\\n\\t\\t\\tIntent memory intent = intents[intentHash];\\n\\t\\t\\tintentsWithOnRamperId[i] = IntentWithOnRamperId({\\n\\t\\t\\t\\tintentHash: _intentHashes[i],\\n\\t\\t\\t\\tintent: intent,\\n\\t\\t\\t\\tonRamperIdHash: getAccountVenmoIdHash(intent.buyerAccount)\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn intentsWithOnRamperId;\\n\\t}\\n\\n\\tfunction getAccountDeposits(\\n\\t\\taddress _account\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (DepositWithAvailableLiquidity[] memory accountDeposits)\\n\\t{\\n\\t\\tuint256[] memory accountDepositIds = accounts[_account].deposits;\\n\\t\\taccountDeposits = new DepositWithAvailableLiquidity[](\\n\\t\\t\\taccountDepositIds.length\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = 0; i < accountDepositIds.length; ++i) {\\n\\t\\t\\tuint256 depositId = accountDepositIds[i];\\n\\t\\t\\tDeposit memory deposit = deposits[depositId];\\n\\t\\t\\t(, uint256 reclaimableAmount) = _getPrunableIntents(depositId);\\n\\n\\t\\t\\taccountDeposits[i] = DepositWithAvailableLiquidity({\\n\\t\\t\\t\\tdepositId: depositId,\\n\\t\\t\\t\\tdepositorIdHash: getAccountVenmoIdHash(deposit.depositor),\\n\\t\\t\\t\\tdeposit: deposit,\\n\\t\\t\\t\\tavailableLiquidity: deposit.remainingDeposits +\\n\\t\\t\\t\\t\\treclaimableAmount\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getDepositFromIds(\\n\\t\\tuint256[] memory _depositIds\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (DepositWithAvailableLiquidity[] memory depositArray)\\n\\t{\\n\\t\\tdepositArray = new DepositWithAvailableLiquidity[](_depositIds.length);\\n\\n\\t\\tfor (uint256 i = 0; i < _depositIds.length; ++i) {\\n\\t\\t\\tuint256 depositId = _depositIds[i];\\n\\t\\t\\tDeposit memory deposit = deposits[depositId];\\n\\t\\t\\t(, uint256 reclaimableAmount) = _getPrunableIntents(depositId);\\n\\n\\t\\t\\tdepositArray[i] = DepositWithAvailableLiquidity({\\n\\t\\t\\t\\tdepositId: depositId,\\n\\t\\t\\t\\tdepositorIdHash: getAccountVenmoIdHash(deposit.depositor),\\n\\t\\t\\t\\tdeposit: deposit,\\n\\t\\t\\t\\tavailableLiquidity: deposit.remainingDeposits +\\n\\t\\t\\t\\t\\treclaimableAmount\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn depositArray;\\n\\t}\\n\\n\\t/* ============ Internal Functions ============ */\\n\\n\\t// Modified to generate a simple hash instead of zk stuff\\n\\t/**\\n\\t * @notice Calculates the intentHash of new intent\\n\\t */\\n\\tfunction _calculateIntentHash(\\n\\t\\tuint256 _depositId\\n\\t) internal view virtual returns (bytes32) {\\n\\t\\tbytes32 intentHash = keccak256(\\n\\t\\t\\tabi.encodePacked(msg.sender, _depositId)\\n\\t\\t);\\n\\n\\t\\treturn intentHash;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\\n\\t * the outstanding amounts are summed and returned alongside the intentHashes\\n\\t */\\n\\tfunction _getPrunableIntents(\\n\\t\\tuint256 _depositId\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (bytes32[] memory prunableIntents, uint256 reclaimedAmount)\\n\\t{\\n\\t\\tbytes32[] memory intentHashes = deposits[_depositId].intentHashes;\\n\\t\\tprunableIntents = new bytes32[](intentHashes.length);\\n\\n\\t\\tfor (uint256 i = 0; i < intentHashes.length; ++i) {\\n\\t\\t\\tIntent memory intent = intents[intentHashes[i]];\\n\\t\\t\\tif (\\n\\t\\t\\t\\tintent.intentTimestamp + intentExpirationPeriod <\\n\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t) {\\n\\t\\t\\t\\tprunableIntents[i] = intentHashes[i];\\n\\t\\t\\t\\treclaimedAmount += intent.amount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _pruneIntents(\\n\\t\\tDeposit storage _deposit,\\n\\t\\tbytes32[] memory _intents\\n\\t) internal {\\n\\t\\tfor (uint256 i = 0; i < _intents.length; ++i) {\\n\\t\\t\\tif (_intents[i] != bytes32(0)) {\\n\\t\\t\\t\\t_pruneIntent(_deposit, _intents[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pruning an intent involves deleting its state from the intents mapping, zeroing out the intendee's currentIntentHash in\\n\\t * their global account mapping, and deleting the intentHash from the deposit's intentHashes array.\\n\\t */\\n\\tfunction _pruneIntent(\\n\\t\\tDeposit storage _deposit,\\n\\t\\tbytes32 _intentHash\\n\\t) internal {\\n\\t\\tIntent memory intent = intents[_intentHash];\\n\\n\\t\\tdelete globalAccount[getAccountVenmoIdHash(intent.buyerAccount)]\\n\\t\\t\\t.currentIntentHash;\\n\\t\\tdelete intents[_intentHash];\\n\\t\\t_deposit.intentHashes.removeStorage(_intentHash);\\n\\n\\t\\temit IntentPruned(_intentHash, intent.deposit);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\\n\\t * deposits mapping and removes tracking it in the user's accounts mapping.\\n\\t */\\n\\tfunction _closeDepositIfNecessary(\\n\\t\\tuint256 _depositId,\\n\\t\\tDeposit storage _deposit\\n\\t) internal {\\n\\t\\tuint256 openDepositAmount = _deposit.outstandingIntentAmount +\\n\\t\\t\\t_deposit.remainingDeposits;\\n\\t\\tif (openDepositAmount == 0) {\\n\\t\\t\\taccounts[_deposit.depositor].deposits.removeStorage(_depositId);\\n\\t\\t\\temit DepositClosed(_depositId, _deposit.depositor);\\n\\t\\t\\tdelete deposits[_depositId];\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if sustainability fee has been defined, if so sends fee to the fee recipient and intent amount minus fee\\n\\t * to the on-ramper. If sustainability fee is undefined then full intent amount is transferred to on-ramper.\\n\\t */\\n\\tfunction _transferFunds(\\n\\t\\tbytes32 _intentHash,\\n\\t\\tIntent memory _intent\\n\\t) internal {\\n\\t\\tuint256 fee;\\n\\t\\tif (sustainabilityFee != 0) {\\n\\t\\t\\tfee = (_intent.amount * sustainabilityFee) / PRECISE_UNIT;\\n\\t\\t\\tgho.transfer(sustainabilityFeeRecipient, fee);\\n\\t\\t}\\n\\n\\t\\tuint256 onRampAmount = _intent.amount - fee;\\n\\t\\tgho.transfer(_intent.to, onRampAmount);\\n\\n\\t\\temit IntentFulfilled(\\n\\t\\t\\t_intentHash,\\n\\t\\t\\t_intent.deposit,\\n\\t\\t\\t_intent.buyerAccount,\\n\\t\\t\\t_intent.to,\\n\\t\\t\\tonRampAmount,\\n\\t\\t\\tfee\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * Function that allows the contract to receive ETH\\n\\t */\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x1ae308d3f0914175337d64f1a9035cc840a8e449518d4b6a67578d969a46d647\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\",\"keccak256\":\"0xb22a8f83076907ee988da63b2d7c563276ac59846e5b2ef7c6371a81628436d9\",\"license\":\"MIT\"},\"contracts/external/Uint256ArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Uint256ArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Uint256 Arrays\\n */\\nlibrary Uint256ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newUints = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newUints[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newUints[aLength + j] = B[j];\\n        }\\n        return newUints;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(uint256[] storage A, uint256 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"uint256 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\",\"keccak256\":\"0x7039d62e2e87a51a2ad0d3650e6c650f6aa31427f87c515a2b11b0f6c41044ba\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003ae138038062003ae18339810160408190526200003491620001dd565b6200003f3362000096565b6001600160a01b0387811660805260058790556006869055600885905560078490556009839055600a80546001600160a01b0319169183169190911790556200008888620000e6565b505050505050505062000263565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000f062000169565b6001600160a01b0381166200015b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001668162000096565b50565b6000546001600160a01b03163314620001c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000152565b565b6001600160a01b03811681146200016657600080fd5b600080600080600080600080610100898b031215620001fb57600080fd5b88516200020881620001c7565b60208a01519098506200021b81620001c7565b8097505060408901519550606089015194506080890151935060a0890151925060c0890151915060e08901516200025281620001c7565b809150509295985092959890939650565b6080516138466200029b600039600081816107890152818161166b01528181611ddc01528181612cf60152612da501526138466000f3fe6080604052600436106102555760003560e01c80637b510fe811610139578063b3fa4c01116100b6578063e279d9641161007a578063e279d964146107eb578063e77176c414610801578063ecb3dc8814610821578063ecd618f014610837578063f2fde38b14610864578063fbf15b1f1461088457600080fd5b8063b3fa4c0114610737578063cc181c2e14610757578063d1af1ca914610777578063d55f960d146107ab578063d9478d20146107cb57600080fd5b80639087beff116100fd5780639087beff1461062d5780639b357b5a1461064d5780639f9fb9681461066d578063a1a954b71461069a578063b02c43d0146106b057600080fd5b80637b510fe81461050f5780638129fc1c1461053c57806381d07e89146105515780638da5cb5b146105715780639021578a146105a357600080fd5b80633d480aff116101d25780635dd76515116101965780635dd7651514610464578063645006ca1461048457806366ec84191461049a57806371134762146104ba578063715018a6146104da57806371a28f69146104ef57600080fd5b80633d480aff146103b457806342987349146103d45780634595bba0146103f4578063495223e7146104215780635081d9521461043757600080fd5b80632a80cda3116102195780632a80cda3146103015780632c463bf914610321578063317dcc9614610343578063392e53cd146103635780633adba28a1461039457600080fd5b80630f1ef98c14610261578063123a11e414610294578063148172da146102b45780631aa3a008146102d6578063238c8494146102eb57600080fd5b3661025c57005b600080fd5b34801561026d57600080fd5b5061028161027c366004613288565b6108a4565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b506102816102af366004613288565b6108cc565b3480156102c057600080fd5b506102d46102cf3660046132aa565b6108f2565b005b3480156102e257600080fd5b506102d46109f3565b3480156102f757600080fd5b5061028160095481565b34801561030d57600080fd5b506102d461031c3660046132aa565b610a9c565b34801561032d57600080fd5b50610336610b30565b60405161028b9190613348565b34801561034f57600080fd5b506102d461035e3660046132aa565b610d32565b34801561036f57600080fd5b5060005461038490600160a01b900460ff1681565b604051901515815260200161028b565b3480156103a057600080fd5b506102d46103af3660046133aa565b610d6f565b3480156103c057600080fd5b506102d46103cf3660046133df565b6112d8565b3480156103e057600080fd5b506102d46103ef3660046132aa565b611725565b34801561040057600080fd5b5061041461040f366004613288565b6117c6565b60405161028b9190613401565b34801561042d57600080fd5b5061028160075481565b34801561044357600080fd5b50610457610452366004613288565b61183f565b60405161028b9190613445565b34801561047057600080fd5b506102d461047f3660046132aa565b611a55565b34801561049057600080fd5b5061028160055481565b3480156104a657600080fd5b506102d46104b53660046132aa565b611af4565b3480156104c657600080fd5b506102d46104d53660046134e7565b611c5e565b3480156104e657600080fd5b506102d4611e51565b3480156104fb57600080fd5b5061045761050a3660046134e7565b611e65565b34801561051b57600080fd5b5061052f61052a366004613288565b612013565b60405161028b91906135a5565b34801561054857600080fd5b506102d46120b2565b34801561055d57600080fd5b506102d461056c3660046132aa565b61211f565b34801561057d57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161028b565b3480156105af57600080fd5b506105fa6105be3660046132aa565b6004602081905260009182526040909120805460018201546002830154600384015493909401546001600160a01b039283169492909116929085565b604080516001600160a01b039687168152959094166020860152928401919091526060830152608082015260a00161028b565b34801561063957600080fd5b506102d46106483660046132aa565b612184565b34801561065957600080fd5b506102d46106683660046132aa565b61221b565b34801561067957600080fd5b5061068d6106883660046132aa565b6122f9565b60405161028b91906135f2565b3480156106a657600080fd5b5061028160085481565b3480156106bc57600080fd5b506107056106cb3660046132aa565b6003602081905260009182526040909120805460018201546002830154938301546004909301546001600160a01b03909216939092909185565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a00161028b565b34801561074357600080fd5b506102d4610752366004613288565b6123aa565b34801561076357600080fd5b50610281610772366004613288565b612462565b34801561078357600080fd5b5061058b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b757600080fd5b506102d46107c63660046132aa565b61247d565b3480156107d757600080fd5b50600a5461058b906001600160a01b031681565b3480156107f757600080fd5b5061028160065481565b34801561080d57600080fd5b5061070561081c3660046132aa565b6125d6565b34801561082d57600080fd5b50610281600c5481565b34801561084357600080fd5b50610857610852366004613605565b612621565b60405161028b919061367a565b34801561087057600080fd5b506102d461087f366004613288565b6127b3565b34801561089057600080fd5b5061038461089f36600461370a565b61282c565b6000600160006108b384612462565b8152602001908152602001600020600101549050919050565b6000600160006108db84612462565b815260208101919091526040016000205492915050565b60006108fd33612462565b600081815260016020908152604080832086845260030190915290205490915060ff16156109725760405162461bcd60e51b815260206004820152601860248201527f5573657220616c7265616479206f6e2064656e796c697374000000000000000060448201526064015b60405180910390fd5b6000818152600160208181526040808420868552600381018352818520805460ff191685179055838352600201805493840181558452922001839055517f976c693d56f27ba17d902bda80c4fa0416b773fbf268bcb0ee71689234d769ee906109e79083908590918252602082015260400190565b60405180910390a15050565b60006109fe33612462565b14610a5b5760405162461bcd60e51b815260206004820152602760248201527f4163636f756e7420616c7265616479206173736f6369617465642077697468206044820152661d995b9b5bd25960ca1b6064820152608401610969565b33600081815260026020526040808220839055518291829182917f672144042732f7b1cdbf0772464ae545aedd7f41d38b8487dafd9085496a5d5191a35050565b610aa4612867565b80600003610af45760405162461bcd60e51b815260206004820152601e60248201527f4d696e696d756d206465706f7369742063616e6e6f74206265207a65726f00006044820152606401610969565b60058190556040518181527fbdde72a6d8d8b42770c9899945ccdce09d0c5c794d3326cdb2d2cca61b12a9fc906020015b60405180910390a150565b60606000805b600b54811015610b9e57610b53670de0b6b3a7640000601961374a565b600b8281548110610b6657610b66613761565b9060005260206000209060060201600201541115610b8c5781610b8881613777565b9250505b80610b9681613777565b915050610b36565b5060008167ffffffffffffffff811115610bba57610bba6134d1565b604051908082528060200260200182016040528015610bf357816020015b610be0613147565b815260200190600190039081610bd85790505b5090506000805b600b54811015610d29576019600b8281548110610c1957610c19613761565b9060005260206000209060060201600201541115610d1757600b8181548110610c4457610c44613761565b60009182526020918290206040805160c081018252600690930290910180546001600160a01b0316835260018101548385015260028101548383015260038101546060840152600481015460808401526005810180548351818702810187019094528084529394919360a086019392830182828015610ce257602002820191906000526020600020905b815481526020019060010190808311610cce575b505050505081525050838381518110610cfd57610cfd613761565b60200260200101819052508180610d1390613777565b9250505b80610d2181613777565b915050610bfa565b50909392505050565b610d3a612867565b60078190556040518181527f88397975d177ce5e18abf3a5fdb8de773e80673d85eeb54f48cfaf688b3d2c3e90602001610b25565b6000610d7a33612462565b6000858152600360205260408120805492935091610da0906001600160a01b0316612462565b600081815260016020908152604080832087845260030190915290205490915060ff1615610e105760405162461bcd60e51b815260206004820181905260248201527f4f6e72616d706572206f6e206465706f7369746f7227732064656e796c6973746044820152606401610969565b600754600084815260016020819052604090912001544291610e3191613790565b1115610e8b5760405162461bcd60e51b8152602060048201526024808201527f4f6e2072616d7020636f6f6c20646f776e20706572696f64206e6f7420656c616044820152631c1cd95960e21b6064820152608401610969565b60008381526001602052604090205415610ee75760405162461bcd60e51b815260206004820152601860248201527f496e74656e74207374696c6c206f75747374616e64696e6700000000000000006044820152606401610969565b828103610f365760405162461bcd60e51b815260206004820152601e60248201527f53656e6465722063616e6e6f7420626520746865206465706f7369746f7200006044820152606401610969565b81546001600160a01b0316610f865760405162461bcd60e51b815260206004820152601660248201527511195c1bdcda5d08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606401610969565b60008511610fe55760405162461bcd60e51b815260206004820152602660248201527f5369676e616c656420616d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b6064820152608401610969565b6006548511156110545760405162461bcd60e51b815260206004820152603460248201527f5369676e616c656420616d6f756e74206d757374206265206c657373207468616044820152731b881b585e081bdb8b5c985b5c08185b5bdd5b9d60621b6064820152608401610969565b6001600160a01b0384166110aa5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742073656e6420746f207a65726f206164647265737300000000006044820152606401610969565b604080516bffffffffffffffffffffffff193360601b1660208083019190915260348083018a90528351808403909101815260549092019092528051910120858360020154101561119c57600080611101896128c1565b91509150878186600201546111169190613790565b101561115b5760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b6044820152606401610969565b6111658583612a69565b808560020160008282546111799190613790565b925050819055508085600301600082825461119491906137a3565b909155505050505b6040805160a0810182523381526001600160a01b0387811660208084019182528385018c8152606085018c8152426080870190815260008981526004808652898220985189549089166001600160a01b0319918216178a5596516001808b01805492909a1691909816179097559251600280890191909155915160038801555195909401949094558884525291812083905590840180548892906112419084906137a3565b925050819055508583600301600082825461125c9190613790565b9091555050600583018054600181018255600091825260209182902001829055604080516001600160a01b0388811682529281018990524281830152905186928316918a9185917f9edf2569e5055735293c38e7f0e3dc216c444ae08220cffd08ff3f3cb991f85e919081900360600190a45050505050505050565b3360009081526002602052604090206001015460051161133a5760405162461bcd60e51b815260206004820152601e60248201527f4d6178696d756d206465706f73697420616d6f756e74207265616368656400006044820152606401610969565b6005548210156113ab5760405162461bcd60e51b815260206004820152603660248201527f4465706f73697420616d6f756e74206d757374206265206772656174657220746044820152751a185b881b5a5b8819195c1bdcda5d08185b5bdd5b9d60521b6064820152608401610969565b600081116114095760405162461bcd60e51b815260206004820152602560248201527f5265636569766520616d6f756e74206d75737420626520677265617465722074604482015264068616e20360dc1b6064820152608401610969565b60008161141e670de0b6b3a76400008561374a565b61142891906137b6565b600c8054919250600091908261143d83613777565b9091555033600081815260026020818152604080842060019081018054808301825590865283862001879055815160c0810183529586528583018b81528683018c815260608801878152608089018c81528551898152808801875260a08b019081528b8a526003808952969099208a5181546001600160a01b0319166001600160a01b039091161781559351948401949094559051958201959095559351918401919091555160048301559151805194955092939092611504926005850192910190613186565b50505060008181526003602081905260408220600b80546001818101835591909452815460069094027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9810180546001600160a01b0319166001600160a01b03909616959095178555908201547f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba82015560028201547f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb820155918101547f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbc83015560048101547f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbd830155600581018054919392611647927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbe90910191906131d1565b50506040516323b872dd60e01b8152336004820152306024820152604481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506323b872dd906064016020604051808303816000875af11580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e191906137d8565b506040805185815260208101849052339183917fde5e24bfa39fef6b5f3734f72e07cb86525ab94ce96827eea4a1f3d9a8ea2ee3910160405180910390a350505050565b61172d612867565b806000036117915760405162461bcd60e51b815260206004820152602b60248201527f4d617820696e74656e742065787069726174696f6e20706572696f642063616e60448201526a6e6f74206265207a65726f60a81b6064820152608401610969565b60088190556040518181527f55e3f6b95de9a0ec782f892e93fafe4e56be0696df204ddf8e0a40a9a713a80390602001610b25565b6060600160006117d584612462565b815260200190815260200160002060020160000180548060200260200160405190810160405280929190818152602001828054801561183357602002820191906000526020600020905b81548152602001906001019080831161181f575b50505050509050919050565b6001600160a01b03811660009081526002602090815260408083206001018054825181850281018501909352808352606094938301828280156118a157602002820191906000526020600020905b81548152602001906001019080831161188d575b50505050509050805167ffffffffffffffff8111156118c2576118c26134d1565b6040519080825280602002602001820160405280156118fb57816020015b6118e8613211565b8152602001906001900390816118e05790505b50915060005b8151811015611a4e57600082828151811061191e5761191e613761565b602090810291909101810151600081815260038084526040808320815160c08101835281546001600160a01b031681526001820154818801526002820154818401529281015460608401526004810154608084015260058101805483518189028101890190945280845295975093959294909360a08601939091908301828280156119c857602002820191906000526020600020905b8154815260200190600101908083116119b4575b505050505081525050905060006119de836128c1565b91505060405180608001604052808481526020016119ff8460000151612462565b8152602001838152602001828460400151611a1a9190613790565b815250868581518110611a2f57611a2f613761565b602002602001018190525050505080611a4790613777565b9050611901565b5050919050565b611a5d612867565b66b1a2bc2ec50000811115611abf5760405162461bcd60e51b815260206004820152602260248201527f4665652063616e6e6f742062652067726561746572207468616e206d61782066604482015261656560f01b6064820152608401610969565b60098190556040518181527f44f48e1b871e6db1e909a7b253b054b7150a0b4ddf4d59b159c827d82e72567090602001610b25565b6000818152600460208181526040808420815160a08101835281546001600160a01b0390811682526001830154811682860152600283015482850181905260038085015460608501529390960154608083015294865292529092208251909116611b985760405162461bcd60e51b8152602060048201526015602482015274125b9d195b9d08191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610969565b80546001600160a01b03163314611bf15760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206d75737420626520746865206465706f7369746f72000000006044820152606401610969565b611bfb8184612acb565b8160600151816003016000828254611c1391906137a3565b925050819055504260016000611c2c8560000151612462565b815260200190815260200160002060010181905550611c4f826040015182612bc1565b611c598383612c99565b505050565b6000805b8251811015611dbf576000838281518110611c7f57611c7f613761565b6020908102919091018101516000818152600390925260409091208054919250906001600160a01b03163314611cf75760405162461bcd60e51b815260206004820152601c60248201527f53656e646572206d75737420626520746865206465706f7369746f72000000006044820152606401610969565b600080611d03846128c1565b91509150611d118383612a69565b808360020154611d219190613790565b611d2b9087613790565b955080836003016000828254611d4191906137a3565b9091555050825460028401546001600160a01b039091169085907fae1f357660ab777dcfd38c0ab6357834684ec26289ecfa07ec65dbf6c3c6431290611d88908590613790565b60405190815260200160405180910390a360006002840155611daa8484612bc1565b5050505080611db890613777565b9050611c62565b5060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5991906137d8565b611e59612867565b611e636000612e77565b565b6060815167ffffffffffffffff811115611e8157611e816134d1565b604051908082528060200260200182016040528015611eba57816020015b611ea7613211565b815260200190600190039081611e9f5790505b50905060005b825181101561200d576000838281518110611edd57611edd613761565b602090810291909101810151600081815260038084526040808320815160c08101835281546001600160a01b031681526001820154818801526002820154818401529281015460608401526004810154608084015260058101805483518189028101890190945280845295975093959294909360a0860193909190830182828015611f8757602002820191906000526020600020905b815481526020019060010190808311611f73575b50505050508152505090506000611f9d836128c1565b9150506040518060800160405280848152602001611fbe8460000151612462565b8152602001838152602001828460400151611fd99190613790565b815250858581518110611fee57611fee613761565b60200260200101819052505050508061200690613777565b9050611ec0565b50919050565b604080518082019091526000815260606020820152604051806040016040528061203c84612462565b81526001600160a01b03841660009081526002602090815260409182902060010180548351818402810184019094528084529382019390918301828280156120a357602002820191906000526020600020905b81548152602001906001019080831161208f575b50505050508152509050919050565b6120ba612867565b600054600160a01b900460ff161561210a5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610969565b6000805460ff60a01b1916600160a01b179055565b6000818152600460208181526040808420815160a08101835281546001600160a01b039081168252600183015416818501526002820154818401819052600380840154606084015292909501546080820152938552909152909120611bfb8184612acb565b61218c612867565b806000036121e65760405162461bcd60e51b815260206004820152602160248201527f4d6178206f6e2072616d7020616d6f756e742063616e6e6f74206265207a65726044820152606f60f81b6064820152608401610969565b60068190556040518181527fcab6b49ca21dd111cf4a55d507bbe89dd12d69216e28247060d4b2163ca41b3990602001610b25565b600061222633612462565b600081815260016020908152604080832086845260030190915290205490915060ff1661228c5760405162461bcd60e51b8152602060048201526014602482015273155cd95c881b9bdd081bdb8819195b9e5b1a5cdd60621b6044820152606401610969565b6000818152600160208181526040808420868552600381018352908420805460ff1916905592849052526122c39060020183612ec7565b60408051828152602081018490527f8935205b1b382095d2d95efbb36f81a11a34c548d45af26adc1a02d2f2bb546f91016109e7565b612301613147565b600082815260036020818152604092839020835160c08101855281546001600160a01b03168152600182015481840152600282015481860152928101546060840152600481015460808401526005810180548551818502810185019096528086529394919360a086019383018282801561239a57602002820191906000526020600020905b815481526020019060010190808311612386575b5050505050815250509050919050565b6123b2612867565b6001600160a01b0381166124145760405162461bcd60e51b8152602060048201526024808201527f46656520726563697069656e742063616e6e6f74206265207a65726f206164646044820152637265737360e01b6064820152608401610969565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527f594ad6ee98bfc0c73e6d15fd4e762502f359e05d26907b7fa1ff82eb5e99f6e490602001610b25565b6001600160a01b031660009081526002602052604090205490565b6000818152600460208181526040808420815160a08101835281546001600160a01b0390811682526001830154169381019390935260028101549183019190915260038101546060830152909101546080820181905290910361251a5760405162461bcd60e51b8152602060048201526015602482015274125b9d195b9d08191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610969565b61252333612462565b815161252e90612462565b1461257b5760405162461bcd60e51b815260206004820152601c60248201527f53656e646572206d75737420626520746865206f6e2d72616d706572000000006044820152606401610969565b60408082015160009081526003602052206125968184612acb565b81606001518160020160008282546125ae9190613790565b909155505060608201516003820180546000906125cc9084906137a3565b9091555050505050565b600b81815481106125e657600080fd5b6000918252602090912060069091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909185565b606060008267ffffffffffffffff81111561263e5761263e6134d1565b6040519080825280602002602001820160405280156126b857816020015b6126a560408051606080820183526000808352835160a0810185528181526020818101839052948101829052918201819052608082015290918201908152600060209091015290565b81526020019060019003908161265c5790505b50905060005b838110156127a95760008585838181106126da576126da613761565b6020908102929092013560008181526004808552604091829020825160a08101845281546001600160a01b0390811682526001830154169681019690965260028101548684015260038101546060808801919091529101546080860152815190810190915290935090508088888681811061275757612757613761565b9050602002013581526020018281526020016127768360000151612462565b81525084848151811061278b5761278b613761565b60200260200101819052505050806127a290613777565b90506126be565b5090505b92915050565b6127bb612867565b6001600160a01b0381166128205760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610969565b61282981612e77565b50565b60006001600061283b85612462565b81526020808201929092526040908101600090812085825260030190925290205460ff16905092915050565b6000546001600160a01b03163314611e635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610969565b6000818152600360209081526040808320600501805482518185028101850190935280835260609493849392919083018282801561291e57602002820191906000526020600020905b81548152602001906001019080831161290a575b50505050509050805167ffffffffffffffff81111561293f5761293f6134d1565b604051908082528060200260200182016040528015612968578160200160208202803683370190505b50925060005b8151811015612a625760006004600084848151811061298f5761298f613761565b6020908102919091018101518252818101929092526040908101600020815160a08101835281546001600160a01b039081168252600183015416938101939093526002810154918301919091526003810154606083015260040154608082018190526008549192504291612a0291613790565b1015612a5157828281518110612a1a57612a1a613761565b6020026020010151858381518110612a3457612a34613761565b60209081029190910101526060810151612a4e9085613790565b93505b50612a5b81613777565b905061296e565b5050915091565b60005b8151811015611c59576000801b828281518110612a8b57612a8b613761565b602002602001015114612abb57612abb83838381518110612aae57612aae613761565b6020026020010151612acb565b612ac481613777565b9050612a6c565b6000818152600460208181526040808420815160a08101835281546001600160a01b0390811680835260018085015490921695830195909552600283015493820193909352600382015460608201529301546080840152919290612b2e90612462565b81526020808201929092526040908101600090812081905584815260049283905290812080546001600160a01b031990811682556001820180549091169055600281018290556003810182905590910155612b8c6005840183612ec7565b604080820151905183907fe8a865b4bab023c399cbd1f2cdd0df2199beb6e5012a4bd2d7691cf7e4199d5a90600090a3505050565b600081600201548260030154612bd79190613790565b905080600003611c595781546001600160a01b03166000908152600260205260409020612c079060010184612fef565b8154604080518581526001600160a01b0390921660208301527f8ac07cc6e38c6222dd0309c80353c1962354bacf222b825d7401cc80e93ff3cc910160405180910390a16000838152600360208190526040822080546001600160a01b031916815560018101839055600281018390559081018290556004810182905590612c92600583018261323d565b5050505050565b6000600954600014612d6557670de0b6b3a76400006009548360600151612cc0919061374a565b612cca91906137b6565b600a5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6391906137d8565b505b6000818360600151612d7791906137a3565b602084015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1291906137d8565b50825160408085015160208087015183516001600160a01b03918216815291820186905292810186905291909216919086907ffa03438194e61c243c6bb5349f1e1dc674431b86f119b5e3b2b327bc43446bce9060600160405180910390a450505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080612f2384805480602002602001604051908101604052809291908181526020018280548015612f1857602002820191906000526020600020905b815481526020019060010190808311612f04575b505050505084613094565b9150915080612f6c5760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606401610969565b8354600090612f7d906001906137a3565b9050808314612fc257848181548110612f9857612f98613761565b9060005260206000200154858481548110612fb557612fb5613761565b6000918252602090912001555b84805480612fd257612fd26137fa565b600190038181906000526020600020016000905590555050505050565b60008061304b8480548060200260200160405190810160405280929190818152602001828054801561304057602002820191906000526020600020905b81548152602001906001019080831161302c575b5050505050846130f7565b9150915080612f6c5760405162461bcd60e51b81526020600482015260156024820152743ab4b73a191a9b103737ba1034b71030b93930bc9760591b6044820152606401610969565b81516000908190815b818110156130e457848682815181106130b8576130b8613761565b6020026020010151036130d2579250600191506130f09050565b806130dc81613777565b91505061309d565b50600019600092509250505b9250929050565b81516000908190815b818110156130e4578486828151811061311b5761311b613761565b602002602001015103613135579250600191506130f09050565b8061313f81613777565b915050613100565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081525090565b8280548282559060005260206000209081019282156131c1579160200282015b828111156131c15782518255916020019190600101906131a6565b506131cd929150613257565b5090565b8280548282559060005260206000209081019282156131c15760005260206000209182015b828111156131c15782548255916001019190600101906131f6565b6040805160808101825260008082526020820152908101613230613147565b8152602001600081525090565b508054600082559060005260206000209081019061282991905b5b808211156131cd5760008155600101613258565b80356001600160a01b038116811461328357600080fd5b919050565b60006020828403121561329a57600080fd5b6132a38261326c565b9392505050565b6000602082840312156132bc57600080fd5b5035919050565b80516001600160a01b031682526020808201518184015260408083015190840152606080830151908401526080808301519084015260a08281015160c0918501829052805191850182905260009290810191839060e08701905b8083101561333d578451825293830193600192909201919083019061331d565b509695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561339d57603f1988860301845261338b8583516132c3565b9450928501929085019060010161336f565b5092979650505050505050565b6000806000606084860312156133bf57600080fd5b83359250602084013591506133d66040850161326c565b90509250925092565b600080604083850312156133f257600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156134395783518352928401929184019160010161341d565b50909695505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156134c357603f19898403018552815160808151855288820151898601528782015181898701526134a2828701826132c3565b6060938401519690930195909552509487019492509086019060010161346c565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156134fa57600080fd5b823567ffffffffffffffff8082111561351257600080fd5b818501915085601f83011261352657600080fd5b813581811115613538576135386134d1565b8060051b604051601f19603f8301168101818110858211171561355d5761355d6134d1565b60405291825284820192508381018501918883111561357b57600080fd5b938501935b8285101561359957843584529385019392850192613580565b98975050505050505050565b60208082528251828201528281015160408084015280516060840181905260009291820190839060808601905b8083101561333d57835182529284019260019290920191908401906135d2565b6020815260006132a360208301846132c3565b6000806020838503121561361857600080fd5b823567ffffffffffffffff8082111561363057600080fd5b818501915085601f83011261364457600080fd5b81358181111561365357600080fd5b8660208260051b850101111561366857600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b828110156136fd578151805185528681015180516001600160a01b039081168988015281890151168787015286810151606080880191909152810151608080880191909152015160a086015285015160c085015260e09093019290850190600101613697565b5091979650505050505050565b6000806040838503121561371d57600080fd5b6137268361326c565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176127ad576127ad613734565b634e487b7160e01b600052603260045260246000fd5b60006001820161378957613789613734565b5060010190565b808201808211156127ad576127ad613734565b818103818111156127ad576127ad613734565b6000826137d357634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156137ea57600080fd5b815180151581146132a357600080fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d6c18129f75a3911299084da7f8c3b24bb712a4eaf90ade5a926cdc1874360be64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "BuidlGuidl",
    "kind": "dev",
    "methods": {
      "addAccountToDenylist(bytes32)": {
        "params": {
          "_deniedUser": "Poseidon hash of the venmoId being banned"
        }
      },
      "cancelIntent(bytes32)": {
        "params": {
          "_intentHash": "Hash of intent being cancelled"
        }
      },
      "offRamp(uint256,uint256)": {
        "params": {
          "_depositAmount": "The amount of GHO to off-ramp",
          "_receiveAmount": "The amount of XOC to receive"
        }
      },
      "onRamp(bytes32)": {
        "params": {
          "_intentHash": "intentHash"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "releaseFundsToOnramper(bytes32)": {
        "params": {
          "_intentHash": "Hash of intent to resolve by releasing the funds"
        }
      },
      "removeAccountFromDenylist(bytes32)": {
        "params": {
          "_approvedUser": "Poseidon hash of the venmoId being approved"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setIntentExpirationPeriod(uint256)": {
        "params": {
          "_intentExpirationPeriod": "New intent expiration period"
        }
      },
      "setMaxOnRampAmount(uint256)": {
        "params": {
          "_maxOnRampAmount": "The new max on ramp amount"
        }
      },
      "setMinDepositAmount(uint256)": {
        "params": {
          "_minDepositAmount": "The new minimum deposit amount"
        }
      },
      "setOnRampCooldownPeriod(uint256)": {
        "params": {
          "_onRampCooldownPeriod": "New on-ramp cooldown period"
        }
      },
      "setSustainabilityFee(uint256)": {
        "params": {
          "_fee": "The new sustainability fee in precise units (10**18, ie 10% = 1e17)"
        }
      },
      "setSustainabilityFeeRecipient(address)": {
        "params": {
          "_feeRecipient": "The new fee recipient address"
        }
      },
      "signalIntent(uint256,uint256,address)": {
        "params": {
          "_amount": "The amount of GHO the user wants to on-ramp",
          "_depositId": "The ID of the deposit the on-ramper intends to use for",
          "_to": "Address to forward funds to (can be same as buyerAccount)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawDeposit(uint256[])": {
        "params": {
          "_depositIds": "Array of depositIds the depositor is attempting to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAccountToDenylist(bytes32)": {
        "notice": "Adds a venmoId to a depositor's deny list. If an address associated with the banned venmoId attempts to signal an intent on the user's deposit they will be denied."
      },
      "cancelIntent(bytes32)": {
        "notice": "Only callable by the originator of the intent. Cancels an outstanding intent thus allowing user to signal a new intent. Deposit state is updated to reflect the cancelled intent."
      },
      "getDepositsWithMinimumBalance()": {
        "notice": "View function to get all Deposits with a remainingDeposits balance larger than 25"
      },
      "initialize()": {
        "notice": "Initialize Ramp with the addresses of the Processors"
      },
      "offRamp(uint256,uint256)": {
        "notice": "Generates a deposit entry for off-rampers that can then be fulfilled by an on-ramper. This function will not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount of GHO."
      },
      "onRamp(bytes32)": {
        "notice": "Anyone can submit an on-ramp transaction, even if caller isn't on-ramper. Upon submission the proof is validated, intent is removed, and deposit state is updated. GHO is transferred to the on-ramper."
      },
      "register()": {
        "notice": "Registers a new account"
      },
      "releaseFundsToOnramper(bytes32)": {
        "notice": "Allows off-ramper to release funds to the on-ramper in case of a failed on-ramp or because of some other arrangement between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and deposit state is updated. GHO is transferred to the on-ramper."
      },
      "removeAccountFromDenylist(bytes32)": {
        "notice": "Removes a venmoId from a depositor's deny list."
      },
      "setIntentExpirationPeriod(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent locking up a depositor's funds."
      },
      "setMaxOnRampAmount(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the max amount allowed to be on-ramped in each transaction. To on-ramp more than this amount a user must make multiple transactions."
      },
      "setMinDepositAmount(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the minimum deposit amount a user can specify for off-ramping."
      },
      "setOnRampCooldownPeriod(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the on-ramp cooldown period, once an on-ramp transaction is completed the user must wait this amount of time before they can signalIntent to on-ramp again."
      },
      "setSustainabilityFee(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to on-rampers upon a successful on-ramp."
      },
      "setSustainabilityFeeRecipient(address)": {
        "notice": "GOVERNANCE ONLY: Updates the recepient of sustainability fees."
      },
      "signalIntent(uint256,uint256,address)": {
        "notice": "Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain in order to unlock _amount of funds on-chain. Each user can only have one outstanding intent at a time regardless of address (tracked using globalAccount). Caller must not be on the depositor's deny list. If there are prunable intents then they will be deleted from the deposit to be able to maintain state hygiene."
      },
      "withdrawDeposit(uint256[])": {
        "notice": "Caller must be the depositor for each depositId in the array, if not whole function fails. Depositor is returned all remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be returned. Deposit will be deleted as long as there are no more outstanding intents."
      }
    },
    "notice": "A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 430,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "isInitialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 435,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "globalAccount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(GlobalAccountInfo)399_storage)"
      },
      {
        "astId": 440,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "accounts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AccountInfo)340_storage)"
      },
      {
        "astId": 445,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "deposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Deposit)354_storage)"
      },
      {
        "astId": 450,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "intents",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Intent)375_storage)"
      },
      {
        "astId": 452,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "minDepositAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 454,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "maxOnRampAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 456,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "onRampCooldownPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 458,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "intentExpirationPeriod",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 460,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "sustainabilityFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 462,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "sustainabilityFeeRecipient",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 466,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "allDeposits",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Deposit)354_storage)dyn_storage"
      },
      {
        "astId": 468,
        "contract": "contracts/BoomieRamp.sol:BoomieRamp",
        "label": "depositCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Deposit)354_storage)dyn_storage": {
        "base": "t_struct(Deposit)354_storage",
        "encoding": "dynamic_array",
        "label": "struct BoomieRamp.Deposit[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AccountInfo)340_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BoomieRamp.AccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountInfo)340_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(GlobalAccountInfo)399_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BoomieRamp.GlobalAccountInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(GlobalAccountInfo)399_storage"
      },
      "t_mapping(t_bytes32,t_struct(Intent)375_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BoomieRamp.Intent)",
        "numberOfBytes": "32",
        "value": "t_struct(Intent)375_storage"
      },
      "t_mapping(t_uint256,t_struct(Deposit)354_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BoomieRamp.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)354_storage"
      },
      "t_struct(AccountInfo)340_storage": {
        "encoding": "inplace",
        "label": "struct BoomieRamp.AccountInfo",
        "members": [
          {
            "astId": 336,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "venmoIdHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 339,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "deposits",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DenyList)391_storage": {
        "encoding": "inplace",
        "label": "struct BoomieRamp.DenyList",
        "members": [
          {
            "astId": 386,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "deniedUsers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 390,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "isDenied",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Deposit)354_storage": {
        "encoding": "inplace",
        "label": "struct BoomieRamp.Deposit",
        "members": [
          {
            "astId": 342,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 344,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "depositAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 346,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "remainingDeposits",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 348,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "outstandingIntentAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 350,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "conversionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 353,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "intentHashes",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(GlobalAccountInfo)399_storage": {
        "encoding": "inplace",
        "label": "struct BoomieRamp.GlobalAccountInfo",
        "members": [
          {
            "astId": 393,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "currentIntentHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 395,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "lastOnrampTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 398,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "denyList",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(DenyList)391_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Intent)375_storage": {
        "encoding": "inplace",
        "label": "struct BoomieRamp.Intent",
        "members": [
          {
            "astId": 366,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "buyerAccount",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 368,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 370,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "deposit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 372,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 374,
            "contract": "contracts/BoomieRamp.sol:BoomieRamp",
            "label": "intentTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
